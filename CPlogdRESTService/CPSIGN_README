How to Dockerise the service
============================

Install cpsign - jar into maven
----------------------------------------
cd to the /lib folder and run the following (update after current cpsign-version)
mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file  -Dfile=cpsign-0.5.6-internal.jar \
                                                                              -DgroupId=com.genettasoft \
                                                                              -DartifactId=cpsign.internal \
                                                                              -Dversion=0.5.6 \
                                                                              -Dpackaging=jar \
                                                                              -DgeneratePom=true

If you have an old cpsign-jar installed already, you will probably need to remove it from the
local maven repository, run:
mvn dependency:purge-local-repository

and then run the above install-call (update project once done).

Check everything is working
---------------------------
From the base-directory, run the following maven command
mvn clean package jetty:run

Then (for instance):
http://localhost:8080/v1/swagger.json
http://localhost:8080/v1/binaryClassification?smiles=C&trainingDataUri=http://cpsign-toxcast-adapter.cloud.douglasconnect.com/v1/assayHitCall/35

Set up model to be served from URL
----------------------------------
cd to the directory where models are, run command below to serv the data
http-server -p 8001 --cors .

If there is a model called acp_class_libsvm.cpsign in the folder, run the following (URI of the model will be http%3A%2F%2F127.0.0.1%3A8001%2Facp_class_libsvm.cpsign)
curl --include -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'http://localhost:8080/v2/models/http%3A%2F%2F127.0.0.1%3A8001%2Facp_class_libsvm.cpsign?smiles=C1COCCN1CCNC(=O)C2=CC=CC=C2OCC3=CC=CC=C3&confidence=0.8'

or pass the models as a file-URI: file:///Users/staffan/git/gs.modeling/com.genettasoft.modeling/test/resources/acp/classification/acp_class_liblinear.cpsign
curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'http://localhost:8080/v2/models/file%3A%2F%2F%2FUsers%2Fstaffan%2Fgit%2Fgs.modeling%2Fcom.genettasoft.modling%2Ftest%2Fresources%2Facp%2Fclassification%2Facp_class_libsvm.cpsign?smiles=C1COCCN1CCNC(%3DO)C2%3DCC%3DCC%3DC2OCC3%3DCC%3DCC%3DC3&confidence=0.8'
curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'http://cpsign-rest.genettasoft.cloud/v2/models/1?smiles=C1COCCN1CCNC(%3DO)C2%3DCC%3DCC%3DC2OCC3%3DCC%3DCC%3DC3&confidence=0.8'
curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'http://cpsign-rest.genettasoft.cloud/v2/models/http://modelingweb.genettasoft.cloud/modelbuilder/jar/3?smiles=C1COCCN1CCNC(%3DO)C2%3DCC%3DCC%3DC2OCC3%3DCC%3DCC%3DC3&confidence=0.8'
curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' 'http://localhost/v2/models/predict?id=http://modelingweb.genettasoft.cloud/modelbuilder/jar/3&smiles=C1COCCN1CCNC(%3DO)C2%3DCC%3DCC%3DC2OCC3%3DCC%3DCC%3DC3&confidence=0.8'



Dockerfile
----------
Dockerfile is located in directory "Docker"
The Dockerfile should start with the base jetty-image, Swagger used
jetty version 9.2 so we should do that as well. We also use Java7 so 
the jre7 is the required java-version of the image. 
We simply need to add our WAR-file to the jetty root and expose the 
service port 8080. 

Dockerfile: 
FROM jetty:9.2-jre7
ADD *.war /var/lib/jetty/webapps/root.war
EXPOSE 8080

Start Docker VM (if you're on a Mac)
------------------------------------
If you haven't used Docker for a while, start it by starting (i.e. by
running Docker Quickstart Terminal) where you get the IP-address of the
Docker Virtual Machine. For instance;
"docker is configured to use the default machine with IP 192.168.99.100"


Using docker to create image and run
------------------------------------
First you need to add the .war-file to the Docker-folder, as we do not want
to have to mount any extra directories to the Docker-image, copy cpsign-rest-*.jar
from /target into the Docker-folder, then;
If you're standing in your Docker-folder run the following command to get
a docker-image with the name cpsign: 
docker build -t cpsign .

use the default web-port (80) and forward to the port jetty listens to (8080):
docker run -it -p 80:8080 cpsign-rest
(the -it makes print information, remove when in production-mode)

Test it!
--------
(OLD DOCKER, having to use the VM of the Docker-linux machine running)
Now test it, instead of using "localhost:8080" we must use the IP-address
of the Docker VM: (in this example it's 192.168.99.100)
http://192.168.99.100:8081/v1/binaryClassification?smiles=CC(C)N=c1nc(Cl)[nH]c(=NC(C)C)[nH]1&trainingDataUri=http://cpsign-toxcast-adapter.cloud.douglasconnect.com/v1/assayHitCall/35

(New Docker for mac)
Docker VM forwarded to localhost:
localhost:8080/v2/swagger.json
localhost:8080/v2/models

Troubleshooting
---------------
If everything seems to be working but you get a "Problem connecting to trainingDataUri.."
error from the container, this might be due to IP-forwarding not enabled on the physical machine
Mac: 
sudo sysctl -w net.inet.ip.forwarding=1 
(make sure to close after testing)

Test to ping form the Docker image:
(DNS-server) docker run -i -t cpsign ping 8.8.8.8
(explicit website) docker run -i -t cpsign ping www.google.com 
