/*
 * Conformal Prediction Log D
 * This is a Conformal Prediction Service for predicting Log D values for compounds. The  underlying model has been trained and evaluated on ChEMBL 23 data. Modeling is done using CPSign, product of GenettaSoft AB.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@genettasoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package se.uu.farmbio.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * Prediction result
 */
@ApiModel(description = "Prediction result")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-05-29T12:46:15.437Z")
public class Prediction   {
  @JsonProperty("smiles")
  private String smiles = null;

  @JsonProperty("lower")
  private Double lower = null;

  @JsonProperty("upper")
  private Double upper = null;

  @JsonProperty("predictionMidpoint")
  private Double predictionMidpoint = null;

  public Prediction smiles(String smiles) {
    this.smiles = smiles;
    return this;
  }

   /**
   * Compound structure notated using SMILES notation
   * @return smiles
  **/
  @JsonProperty("smiles")
  @ApiModelProperty(value = "Compound structure notated using SMILES notation")
  public String getSmiles() {
    return smiles;
  }

  public void setSmiles(String smiles) {
    this.smiles = smiles;
  }

  public Prediction lower(Double lower) {
    this.lower = lower;
    return this;
  }

   /**
   * The lower range of the prediction value
   * @return lower
  **/
  @JsonProperty("lower")
  @ApiModelProperty(value = "The lower range of the prediction value")
  public Double getLower() {
    return lower;
  }

  public void setLower(Double lower) {
    this.lower = lower;
  }

  public Prediction upper(Double upper) {
    this.upper = upper;
    return this;
  }

   /**
   * The upper range of the prediction value
   * @return upper
  **/
  @JsonProperty("upper")
  @ApiModelProperty(value = "The upper range of the prediction value")
  public Double getUpper() {
    return upper;
  }

  public void setUpper(Double upper) {
    this.upper = upper;
  }

  public Prediction predictionMidpoint(Double predictionMidpoint) {
    this.predictionMidpoint = predictionMidpoint;
    return this;
  }

   /**
   * The predicted midpoint value, note that this is the  prediction given by the underlying SVM-models and  there is NO confidence assigned to this point value!
   * @return predictionMidpoint
  **/
  @JsonProperty("predictionMidpoint")
  @ApiModelProperty(value = "The predicted midpoint value, note that this is the  prediction given by the underlying SVM-models and  there is NO confidence assigned to this point value!")
  public Double getPredictionMidpoint() {
    return predictionMidpoint;
  }

  public void setPredictionMidpoint(Double predictionMidpoint) {
    this.predictionMidpoint = predictionMidpoint;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prediction prediction = (Prediction) o;
    return Objects.equals(this.smiles, prediction.smiles) &&
        Objects.equals(this.lower, prediction.lower) &&
        Objects.equals(this.upper, prediction.upper) &&
        Objects.equals(this.predictionMidpoint, prediction.predictionMidpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(smiles, lower, upper, predictionMidpoint);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prediction {\n");
    
    sb.append("    smiles: ").append(toIndentedString(smiles)).append("\n");
    sb.append("    lower: ").append(toIndentedString(lower)).append("\n");
    sb.append("    upper: ").append(toIndentedString(upper)).append("\n");
    sb.append("    predictionMidpoint: ").append(toIndentedString(predictionMidpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

