/*
 * Conformal Prediction Log D
 * This is a Conformal Prediction Service for predicting Log D values for compounds. The  underlying model has been trained and evaluated on ChEMBL 23 data. Modeling is done using CPSign, product of GenettaSoft AB.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@genettasoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package se.uu.farmbio.models;

import java.util.Objects;

import org.json.simple.JSONObject;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import se.uu.farmbio.api.predict.Utils;

/**
 * Prediction result
 */
@ApiModel(description = "Prediction result")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-05-29T12:46:15.437Z")
public class Prediction   {
	@JsonProperty("smiles")
	private String smiles = null;

	@JsonProperty("lower")
	private Double lower = null;

	@JsonProperty("upper")
	private Double upper = null;

	@JsonProperty("predictionMidpoint")
	private Double predictionMidpoint = null;

	@JsonProperty("confidence")
	private Double confidence = null;

	public Prediction(String smiles, double lower, double upper, double mp, double confidence) {
		this.smiles = smiles;
		this.lower = lower;
		this.upper = upper;
		this.predictionMidpoint = mp;
		this.confidence = confidence;
	}

	/**
	 * Compound structure notated using SMILES notation
	 * @return smiles
	 **/
	@JsonProperty("smiles")
	@ApiModelProperty(value = "Compound structure notated using SMILES notation")
	public String getSmiles() {
		return smiles;
	}

	/**
	 * The lower range of the prediction value
	 * @return lower
	 **/
	@JsonProperty("lower")
	@ApiModelProperty(value = "The lower range of the prediction value")
	public Double getLower() {
		return lower;
	}

	/**
	 * The upper range of the prediction value
	 * @return upper
	 **/
	@JsonProperty("upper")
	@ApiModelProperty(value = "The upper range of the prediction value")
	public Double getUpper() {
		return upper;
	}

	/**
	 * The predicted midpoint value, note that this is the  prediction given by the underlying SVM-models and  there is NO confidence assigned to this point value!
	 * @return predictionMidpoint
	 **/
	@JsonProperty("predictionMidpoint")
	@ApiModelProperty(value = "The predicted midpoint value, note that this is the  prediction given by the underlying SVM-models and  there is NO confidence assigned to this point value!")
	public Double getPredictionMidpoint() {
		return predictionMidpoint;
	}

	/**
	 * The confidence of the prediction 
	 * @return confidence
	 */
	@JsonProperty("confidence")
	@ApiModelProperty(value = "The confidence of the prediction")
	public Double getConfidence() {
		return confidence;
	}


	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Prediction prediction = (Prediction) o;
		return Objects.equals(this.smiles, prediction.smiles) &&
				Objects.equals(this.lower, prediction.lower) &&
				Objects.equals(this.upper, prediction.upper) &&
				Objects.equals(this.predictionMidpoint, prediction.predictionMidpoint);
	}

	@Override
	public int hashCode() {
		return Objects.hash(smiles, lower, upper, predictionMidpoint);
	}


	@SuppressWarnings("unchecked")
	@Override
	public String toString() {
		JSONObject resp = new JSONObject();
		resp.put("smiles", smiles);
		resp.put("lower", Utils.roundTo3digits(lower));
		resp.put("upper", Utils.roundTo3digits(upper));
		resp.put("predictionMidpoint", Utils.roundTo3digits(predictionMidpoint));
		resp.put("confidence", confidence);
		return resp.toJSONString();
	}

}

